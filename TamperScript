// ==UserScript==
// @name         Marshal Mood-Based Face (248x248) - v1.8 (responsive size)
// @namespace    http://tampermonkey.net/
// @version      1.8
// @description  Avatar changes with expression-specific animations, responsive to sidebar open/close.
// @match        https://chat.openai.com/*
// @match        https://chatgpt.com/*
// @grant        none
// ==/UserScript==
(function() {
  'use strict';

  const faces = [
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/1.png", // smug
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/2.png", // angry
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/3.png", // happy
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/4.png", // annoyed
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/5.png", // smirk
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/6.png"  // shy
  ];

  let avatarSize = 126;
  const container = document.createElement('div');
  Object.assign(container.style, {
    position: 'fixed',
    left: '20%',
    bottom: '110px',
    width: avatarSize + 'px',
    height: avatarSize + 'px',
    zIndex: 2147483647,
    pointerEvents: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    transition: 'opacity 180ms ease, width 220ms ease, height 220ms ease, left 220ms ease, bottom 220ms ease'
  });

  const img = document.createElement('img');
  img.src = faces[0];
  img.width = avatarSize; img.height = avatarSize;
  img.style.objectFit = 'contain';
  img.style.borderRadius = '12px';
  img.style.boxShadow = '0 6px 18px rgba(0,0,0,0.45)';
  container.appendChild(img);

  const label = document.createElement('div');
  label.textContent = 'Essex';
  Object.assign(label.style, {
    position: 'absolute', bottom: (-20) + 'px', left: '0', fontSize: '11px',
    color: '#dff7ff', textShadow: '0 1px 2px rgba(0,0,0,0.8)', pointerEvents: 'none', opacity: '0.9'
  });
  container.appendChild(label);
  document.documentElement.appendChild(container);

  // ðŸ”¥ Inject per-expression animations
  const style = document.createElement('style');
  style.textContent = `
    @keyframes smugSway {
      0% { transform: rotate(0deg); }
      30% { transform: rotate(-4deg); }
      60% { transform: rotate(3deg); }
      100% { transform: rotate(0deg); }
    }
    @keyframes angryShake {
      0%, 100% { transform: translateX(0); }
      25% { transform: translateX(-8px); }
      75% { transform: translateX(8px); }
    }
    @keyframes happyBounce {
      0% { transform: translateY(0) scale(1); }
      30% { transform: translateY(-12px) scale(1.05); }
      60% { transform: translateY(0) scale(0.97); }
      100% { transform: translateY(0) scale(1); }
    }
    @keyframes annoyedTilt {
      0% { transform: rotate(0deg); }
      40% { transform: rotate(-6deg); }
      80% { transform: rotate(3deg); }
      100% { transform: rotate(0deg); }
    }
    @keyframes smirkPop {
      0% { transform: scale(1); }
      30% { transform: scale(1.08) rotate(-3deg); }
      60% { transform: scale(0.97) rotate(1deg); }
      100% { transform: scale(1); }
    }
    @keyframes shyPeek {
      0% { transform: translateY(0) scale(1); opacity: 1; }
      30% { transform: translateY(10px) scale(0.9); opacity: 0.8; }
      60% { transform: translateY(0) scale(1.02); opacity: 1; }
      100% { transform: translateY(0) scale(1); opacity: 1; }
    }

    .marshal-smug    { animation: smugSway 500ms ease; }
    .marshal-angry   { animation: angryShake 350ms ease; }
    .marshal-happy   { animation: happyBounce 420ms ease; }
    .marshal-annoyed { animation: annoyedTilt 450ms ease; }
    .marshal-smirk   { animation: smirkPop 400ms ease; }
    .marshal-shy     { animation: shyPeek 500ms ease; }
  `;
  document.head.appendChild(style);

  function pickFaceByText(text) {
    if (!text) return faces[0];
    const lower = text.toLowerCase();
    if (/\[mood:smug\]/i.test(lower)) return faces[0];
    if (/\[mood:angry\]/i.test(lower)) return faces[1];
    if (/\[mood:happy\]/i.test(lower)) return faces[2];
    if (/\[mood:annoyed\]/i.test(lower)) return faces[3];
    if (/\[mood:smirk\]/i.test(lower)) return faces[4];
    if (/\[mood:shy\]/i.test(lower)) return faces[5];

    if (/(thank you|thanks|appreciate|grateful|cheers|great|awesome|glad)/.test(lower)) return faces[2]; // happy
    if (/(angry|furious|rage|attack|fight|enemy|war|destroy|crush)/.test(lower)) return faces[1]; // angry
    if (/(ugh|seriously|annoyed|irritating|bother|tired)/.test(lower)) return faces[3]; // annoyed
    if (/(heh|hehe|well then|sneaky|smirk)/.test(lower)) return faces[4]; // smirk
    if (/(maybe|uh|i guess|blush|embarrassed|shy)/.test(lower)) return faces[5]; // shy

    return faces[0];
  }

  function getAnimationClass(faceSrc) {
    if (faceSrc.endsWith("1.png")) return "marshal-smug";
    if (faceSrc.endsWith("2.png")) return "marshal-angry";
    if (faceSrc.endsWith("3.png")) return "marshal-happy";
    if (faceSrc.endsWith("4.png")) return "marshal-annoyed";
    if (faceSrc.endsWith("5.png")) return "marshal-smirk";
    if (faceSrc.endsWith("6.png")) return "marshal-shy";
    return "marshal-smug";
  }

  function updateAvatar(text) {
    const newSrc = pickFaceByText(text);
    if (!img.src.endsWith(newSrc)) {
      img.style.opacity = '0';
      setTimeout(() => {
        img.src = newSrc;
        img.style.opacity = '1';
        const animClass = getAnimationClass(newSrc);
        img.className = ""; // reset
        void img.offsetWidth; // force reflow
        img.classList.add(animClass);
      }, 140);
    }
  }

  // Sidebar responsiveness
   function checkSidebar() {
    const sidebar = document.querySelector('nav, aside, div[class*="sidebar"]');
    let closed = false;
    if (sidebar) {
      const rect = sidebar.getBoundingClientRect();
      closed = rect.width < 100;
    }

    const targetSize = closed ? 160 : 126;
    const targetLeft = closed ? "40px" : "80px";
    const targetBottom = closed ? "130px" : "110px"; // lift avatar higher when larger

    if (avatarSize !== targetSize) {
      avatarSize = targetSize;
      container.style.width = avatarSize + "px";
      container.style.height = avatarSize + "px";
      img.width = avatarSize;
      img.height = avatarSize;
    }

    if (container.style.left !== targetLeft) {
      container.style.left = targetLeft;
    }

    if (container.style.bottom !== targetBottom) {
      container.style.bottom = targetBottom;
    }

    requestAnimationFrame(checkSidebar);
  }


  // Robust fetch of MOST RECENT assistant text
  function findLatestAssistantText() {
    const selectors = [
      'div[data-testid="assistant-response"]',
      'div[data-testid="message-content"]',
      'div[class*="assistant"]',
      'div[role="listitem"] .text-base',
      'main'
    ];
    for (const sel of selectors) {
      try {
        const els = Array.from(document.querySelectorAll(sel));
        if (els.length) {
          let latest = null; let maxTop = -Infinity;
          for (const el of els) {
            const txt = (el.innerText || '').trim();
            if (!txt || txt.length < 10) continue;
            const r = el.getBoundingClientRect();
            if (r.top > maxTop) { maxTop = r.top; latest = txt; }
          }
          if (latest) return latest;
        }
      } catch(e) {}
    }
    const candidates = Array.from(document.querySelectorAll('div, p, span'))
      .filter(el => {
        if (!el || !el.innerText) return false;
        const txt = el.innerText.trim();
        if (txt.length < 12 || txt.length > 10000) return false;
        if (/^(new chat|clear chat|regenerate|send)$/i.test(txt)) return false;
        return true;
      });
    if (!candidates.length) return null;
    let chosen = candidates[0];
    let maxTop = -Infinity;
    for (const el of candidates) {
      const r = el.getBoundingClientRect();
      if (r.top > maxTop) { maxTop = r.top; chosen = el; }
    }
    return chosen ? chosen.innerText.trim() : null;
  }

  let lastSeen = null;
  const observer = new MutationObserver(() => {
    if (observer._scheduled) return;
    observer._scheduled = true;
    setTimeout(() => {
      observer._scheduled = false;
      const latest = findLatestAssistantText();
      if (latest && latest !== lastSeen) {
        lastSeen = latest;
        console.info('Marshal-avatar detected assistant text:', latest.slice(0,200));
        updateAvatar(latest);
      }
    }, 150);
  });

  observer.observe(document.body, { childList: true, subtree: true });

  window.__marshal_avatar_force = function(s) {
    lastSeen = s;
    updateAvatar(s);
    console.info('Marshal-avatar forced to:', s);
  };

  window.addEventListener('beforeunload', () => {
    observer.disconnect();
    if (container && container.parentNode) container.parentNode.removeChild(container);
  });

})();
