// ==UserScript==
// @name         Marshal Mood-Based Face (248x248) - v1.93 (sidebar fix + toggle debug)
// @namespace    http://tampermonkey.net/
// @version      1.93 
// @description  Avatar changes with expression-specific animations, detects sidebar open/close reliably, debug toggleable.
// @match        https://chat.openai.com/*
// @match        https://chatgpt.com/*
// @grant        none
// ==/UserScript==
(function () {
  'use strict';

  const faces = [
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/1.png", // smug
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/2.png", // angry
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/3.png", // happy
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/4.png", // annoyed
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/5.png", // smirk
    "https://raw.githubusercontent.com/neyotohirokun-ux/dynamic-faces/main/6.png"  // shy
  ];

  const SIZE_SMALL = 126;
  const SIZE_LARGE = 180;

  const container = document.createElement('div');
  container.id = 'marshal-avatar-container';
  Object.assign(container.style, {
    position: 'fixed',
    left: '20px',
    bottom: '110px',
    width: SIZE_SMALL + 'px',
    height: SIZE_SMALL + 'px',
    zIndex: 2147483647,
    pointerEvents: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    transition: 'width 240ms ease, height 240ms ease, left 240ms ease, bottom 240ms ease, opacity 180ms ease, transform 240ms ease',
    transformOrigin: 'bottom left'
  });

  const img = document.createElement('img');
  img.src = faces[0];
  img.width = SIZE_SMALL;
  img.height = SIZE_SMALL;
  Object.assign(img.style, {
    objectFit: 'contain',
    borderRadius: '12px',
    boxShadow: '0 6px 18px rgba(0,0,0,0.45)',
    display: 'block'
  });
  container.appendChild(img);

  const label = document.createElement('div');
  label.textContent = 'Essex';
  Object.assign(label.style, {
    position: 'absolute',
    bottom: (-20) + 'px',
    left: '0',
    fontSize: '11px',
    color: '#dff7ff',
    textShadow: '0 1px 2px rgba(0,0,0,0.8)',
    pointerEvents: 'none',
    opacity: '0.95'
  });
  container.appendChild(label);

  (document.body || document.documentElement).appendChild(container);

  const style = document.createElement('style');
  style.textContent = `
    @keyframes smugSway { 0%{transform:rotate(0)}30%{transform:rotate(-4deg)}60%{transform:rotate(3deg)}100%{transform:rotate(0)} }
    @keyframes angryShake { 0%,100%{transform:translateX(0)}25%{transform:translateX(-8px)}75%{transform:translateX(8px)} }
    @keyframes happyBounce { 0%{transform:translateY(0) scale(1)}30%{transform:translateY(-12px) scale(1.05)}60%{transform:translateY(0) scale(0.97)}100%{transform:translateY(0) scale(1)} }
    @keyframes annoyedTilt { 0%{transform:rotate(0)}40%{transform:rotate(-6deg)}80%{transform:rotate(3deg)}100%{transform:rotate(0)} }
    @keyframes smirkPop { 0%{transform:scale(1)}30%{transform:scale(1.08) rotate(-3deg)}60%{transform:scale(0.97) rotate(1deg)}100%{transform:scale(1)} }
    @keyframes shyPeek { 0%{transform:translateY(0) scale(1); opacity:1}30%{transform:translateY(10px) scale(0.9); opacity:0.8}60%{transform:translateY(0) scale(1.02); opacity:1}100%{transform:translateY(0) scale(1); opacity:1} }

    .marshal-smug    { animation: smugSway 500ms ease; }
    .marshal-angry   { animation: angryShake 350ms ease; }
    .marshal-happy   { animation: happyBounce 420ms ease; }
    .marshal-annoyed { animation: annoyedTilt 450ms ease; }
    .marshal-smirk   { animation: smirkPop 400ms ease; }
    .marshal-shy     { animation: shyPeek 500ms ease; }

    #marshal-debug {
      position: fixed;
      top: 50px;
      right: 20px;
      background: rgba(0,0,0,0.7);
      color: #0ff;
      font-size: 11px;
      font-family: monospace;
      padding: 6px 8px;
      border-radius: 6px;
      z-index: 2147483647;
      white-space: pre;
      display: none;
    }
  `;
  document.head.appendChild(style);

  const debugBox = document.createElement('div');
  debugBox.id = 'marshal-debug';
  document.body.appendChild(debugBox);

  // Helper functions
  function isVisible(el) {
    if (!el) return false;
    const cs = getComputedStyle(el);
    if (cs.display === 'none' || cs.visibility === 'hidden' || parseFloat(cs.opacity) === 0) return false;
    const r = el.getBoundingClientRect();
    return (r.width > 8 && r.height > 8);
  }

  function findSidebar() {
    const el = document.querySelector('nav[role="navigation"], aside, div[data-testid="sidebar"], div[class*="sidebar"], div[aria-label*="sidebar"]');
    return el && isVisible(el) ? el : null;
  }

  function findMain() {
    const el = document.querySelector('main, div[role="main"], div[class*="chat"], div[class*="Main"]');
    return el && isVisible(el) ? el : null;
  }

  let lastSidebarState = null;
  function updateLayout() {
    try {
      const sidebar = findSidebar();
      const main = findMain();
      const mainRect = main ? main.getBoundingClientRect() : null;

      // NEW RULE: Sidebar is open if main area shifted to the right
      const sidebarOpen = mainRect ? (mainRect.left > 100) : !!sidebar;
      const targetSize = sidebarOpen ? SIZE_SMALL : SIZE_LARGE;
      const targetBottom = sidebarOpen ? 110 : 170;
      let leftPx = mainRect ? Math.max(8, Math.round(mainRect.left + 10)) : 12;
      if (!sidebarOpen) leftPx = 12;

      // Resize + reposition
      container.style.width = targetSize + 'px';
      container.style.height = targetSize + 'px';
      img.width = targetSize;
      img.height = targetSize;
      const margin = 16;
      container.style.left = (leftPx + margin) + 'px';
      container.style.bottom = targetBottom + 'px';

      // Debug toggle
      if (window.__marshal_avatar_debug) {
        debugBox.style.display = 'block';
        debugBox.textContent =
          `sidebarOpen: ${sidebarOpen}\n` +
          `size: ${targetSize}\n` +
          `left: ${leftPx}\n` +
          `mainLeft: ${mainRect ? mainRect.left : 'null'}`;
      } else {
        debugBox.style.display = 'none';
      }

      lastSidebarState = sidebarOpen;
    } catch (e) {
      console.warn('Marshal-avatar: layout update failed', e);
    }
  }

  // Initial + observers
  updateLayout();
  const mo = new MutationObserver(() => setTimeout(updateLayout, 120));
  mo.observe(document.body, { childList: true, subtree: true, attributes: true });
  window.addEventListener('resize', updateLayout, { passive: true });
  setInterval(updateLayout, 500);

  // Face switching
  function pickFaceByText(text) {
    if (!text) return faces[0];
    const lower = text.toLowerCase();
    if (/\[mood:smug\]/.test(lower)) return faces[0];
    if (/\[mood:angry\]/.test(lower)) return faces[1];
    if (/\[mood:happy\]/.test(lower)) return faces[2];
    if (/\[mood:annoyed\]/.test(lower)) return faces[3];
    if (/\[mood:smirk\]/.test(lower)) return faces[4];
    if (/\[mood:shy\]/.test(lower)) return faces[5];
    if (/(thank you|thanks|glad|appreciate)/.test(lower)) return faces[2];
    if (/(angry|rage|attack|war)/.test(lower)) return faces[1];
    if (/(ugh|annoyed|tired|seriously)/.test(lower)) return faces[3];
    if (/(smirk|hehe|sneaky|heh)/.test(lower)) return faces[4];
    if (/(maybe|uh|blush|shy)/.test(lower)) return faces[5];
    return faces[0];
  }

  function getAnimationClass(faceSrc) {
    if (faceSrc.endsWith("1.png")) return "marshal-smug";
    if (faceSrc.endsWith("2.png")) return "marshal-angry";
    if (faceSrc.endsWith("3.png")) return "marshal-happy";
    if (faceSrc.endsWith("4.png")) return "marshal-annoyed";
    if (faceSrc.endsWith("5.png")) return "marshal-smirk";
    if (faceSrc.endsWith("6.png")) return "marshal-shy";
    return "marshal-smug";
  }

  function updateAvatar(text) {
    const newSrc = pickFaceByText(text);
    if (!img.src.endsWith(newSrc)) {
      img.style.opacity = '0';
      setTimeout(() => {
        img.src = newSrc;
        img.style.opacity = '1';
        img.className = "";
        void img.offsetWidth;
        img.classList.add(getAnimationClass(newSrc));
      }, 140);
    }
  }

  function findLatestAssistantText() {
    const els = Array.from(document.querySelectorAll('div[data-testid="assistant-response"], div[data-testid="message-content"], div[class*="assistant"]'));
    if (!els.length) return null;
    let latest = null, maxTop = -Infinity;
    for (const el of els) {
      const txt = (el.innerText || '').trim();
      if (!txt || txt.length < 10) continue;
      const r = el.getBoundingClientRect();
      if (r.top > maxTop) { maxTop = r.top; latest = txt; }
    }
    return latest;
  }

  let lastSeen = null;
  const replyObserver = new MutationObserver(() => {
    setTimeout(() => {
      const latest = findLatestAssistantText();
      if (latest && latest !== lastSeen) {
        lastSeen = latest;
        updateAvatar(latest);
      }
    }, 150);
  });
  replyObserver.observe(document.body, { childList: true, subtree: true });

  // Manual force
  window.__marshal_avatar_force = function (s) {
    lastSeen = s;
    updateAvatar(s);
  };
})();
